// docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider        = "mysql"
    url             = env("DATABASE_URL")
    relationMode    = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    companyId     String
    groupId       String
    accounts      Account[]
    sessions      Session[]
    company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@index([companyId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Legacy Database (with adaptations)
model Company {
    id          String  @id @default(cuid())
    name        String  @unique
    address     String
    cnpj        String  @unique
    active      Boolean
    employees   Employee[]
    users       User[]
}

model Employee {
    id          String      @id @default(cuid())
    name        String
    cpf         String      @unique
    ctps        String      @unique
    cnh         String      @unique
    phone       String?
    companyId   String
    company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
    journeys    Journey[]
    slips       Slip[]

    @@index([companyId])
}

model Journey {
    id          String      @id @default(cuid())
    startDate   DateTime
    endDate     DateTime
    plateNumber String
    employeeId  String
    employee    Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    type        String

    @@index([employeeId])
}

model Slip {
    id              String      @id @default(cuid())
    reference       String?
    controlCode     String?    
    file            String?
    contentType     String?
    employeeId      String
    employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    @@index([employeeId])
}



